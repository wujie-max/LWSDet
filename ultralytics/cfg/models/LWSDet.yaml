# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, AFSModule, [128, 2]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, AFSModule, [256, 2]]
  - [-1, 1, PGConv, [512, 3, 2]] # 5-P4/16
  - [-1, 6, AFSModule, [512, 2]]
  - [-1, 1, PGConv, [1024, 3, 2]] # 7-P5/32
  - [-1, 3, AFSModule, [1024, 2]]
  - [-1, 1, SPPF, [1024, 5]] # 9

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 1024
  - [6, 1, Conv, [256, 1, 1, None, 1, 1, False]]  #
  - [4, 1, Conv, [256, 1, 1, None, 1, 1, False]]  # 12 input_proj.0 80
  - [[-2, -1, -3], 1, MLFF, [256]]
  - [-1, 3, C2f, [512]] # 14


  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 512
  - [ 2, 1, Conv, [ 256, 1, 1, None, 1, 1, False ] ]  # 160
  - [[12, -1, -2 ], 1, MLFF, [256] ]  # cat backbone P4
  - [-1, 3, C2f, [256]] # 18 (P3/8-small) 80


  - [-1, 1, PGConv, [512, 3, 2]]  # 256
  - [14, 1, Conv, [ 256, 1, 1, None, 1, 1, False ] ]
  - [[-1, 11, -2], 1, MLFF, [256]] # cat head P4
  - [-1, 3, C2f, [256]] # 22 (P4/16-medium) 40


  - [-1, 1, PGConv, [512, 3, 2]]  # 512
  - [[-1, 9], 1, Concat, [1]] # cat head P5
  - [-1, 3, C2f, [512]] # 25 (P5/32-large)


  - [[18, 22, 25], 1, Detect, [nc]] # Detect(P3, P4, P5)
